---
- name: Ensure namespace existence for the Storage Operator
  community.kubernetes.k8s:
      state: present
      api_version: v1
      kind: Namespace
      merge_type:
        - strategic-merge
        - merge
      definition:
        metadata:
          name: openshift-storage

- name: Ensure operator group existence for the Storage Operator
  community.kubernetes.k8s:
      state: present
      api_version: operators.coreos.com/v1
      kind: OperatorGroup
      merge_type:
        - strategic-merge
        - merge
      definition:
        metadata:
          name: openshift-storage-operatorgroup
          namespace: openshift-storage
        spec:
          targetNamespaces:
            - openshift-storage

- name: Ensure subscription existence for the Storage Operator
  community.kubernetes.k8s:
      state: present
      api_version: operators.coreos.com/v1alpha1
      kind: Subscription
      merge_type:
        - strategic-merge
        - merge
      definition:
        metadata:
          name: ocs-subscription
          namespace: openshift-storage
        spec:
          channel: "{{ ocs_channel }}"
          installPlanApproval: Automatic
          name:  ocs-operator
          source: redhat-operators
          sourceNamespace: openshift-marketplace

- name: Verify that the OCS operator subscription is created
  community.kubernetes.k8s_info:
    kind: Subscription
    namespace: openshift-storage
    name: ocs-subscription
  register: ocs_sub
  until: "ocs_sub.failed == false"
  retries: 30
  delay: 10

- name: Get OCS CSV
  community.kubernetes.k8s_info:
    api_version: operators.coreos.com/v1alpha1
    kind: Subscription
    name: ocs-subscription
    namespace: openshift-storage
  register: OCS_SUB_STATUS
  until: OCS_SUB_STATUS.resources[0].status.installedCSV is defined
  retries: 30
  delay: 10

- name: Display OCS CSV version
  debug:
    msg: "{{ OCS_SUB_STATUS.resources[0].status.installedCSV }}"

- name: Wait for OCS Operator to Install
  community.kubernetes.k8s_info:
    api_version: operators.coreos.com/v1alpha1
    kind: ClusterServiceVersion
    namespace: openshift-storage
    name: "{{ OCS_SUB_STATUS.resources[0].status.installedCSV }}"
  register: OCS_STATUS
  until: "'InstallSucceeded' in OCS_STATUS | json_query('resources[].status.reason | []')"
  retries: 90
  delay: 2
  ignore_errors: true

- name: Create Noobaa secret
  community.kubernetes.k8s:
    state: present
    kind: Secret
    name: noobaa-aws-cloud-creds-secret
    namespace: openshift-storage
    definition:
      data:
        aws_access_key_id: "{{ nooba_aws_access_key_id }}"
        aws_secret_access_key: "{{ nooba_aaws_secret_access_key }}"

- name: Wait for OpenShift Storage Operator
  community.kubernetes.k8s_info:
    api_version: v1
    kind: Pod
    namespace: openshift-storage
    label_selectors:
      - name = ocs-operator
  register: pod
  retries: 72
  delay: 5
  until:
    - pod.resources[0].status.phase == "Running"

- name: Wait for Rook/Ceph Operator
  community.kubernetes.k8s_info:
    api_version: v1
    kind: Pod
    namespace: openshift-storage
    label_selectors:
      - app = rook-ceph-operator
  register: pod
  retries: 72
  delay: 5
  until:
    - pod.resources[0].status.phase == "Running"

- name: Wait for Noobaa Operator
  community.kubernetes.k8s_info:
    api_version: v1
    kind: Pod
    namespace: openshift-storage
    label_selectors:
      - noobaa-operator = deployment
  register: pod
  retries: 2
  delay: 5
  until:
    - pod.resources[0].status.phase == "Running"

- name: Create StorageCluster Resource
  community.kubernetes.k8s:
    state: present
    definition: "{{ lookup('template', 'templates/storage_cluster.j2') }}"

- name: Wait 20 Minutes for Storage Cluster to Become Available
  community.kubernetes.k8s_info:
    api_version: ocs.openshift.io/v1
    kind: StorageCluster
    name: ocs-storagecluster
    namespace: openshift-storage
  retries: 300
  delay: 5
  register: sc
  until:
    - sc.resources[0].status.phase == "Ready"

- name: Ensure GP2 is non defualt
  community.kubernetes.k8s:
    state: present
    kind: StorageClass
    api_version: storage.k8s.io/v1
    merge_type:
      - strategic-merge
      - merge
    definition:
      metadata:
        name: gp2
        annotations:
          storageclass.kubernetes.io/is-default-class: 'false'
      provisioner: kubernetes.io/aws-ebs
      parameters:
        encrypted: 'true'
        type: gp2
      reclaimPolicy: Delete
      allowVolumeExpansion: true
      volumeBindingMode: WaitForFirstConsumer

- name: Ensure OCS SC is configured as default
  community.kubernetes.k8s:
    state: present
    kind: StorageClass
    api_version: storage.k8s.io/v1
    name: ocs-storagecluster-cephfs
    merge_type:
      - strategic-merge
      - merge
    definition:
      metadata:
        name: ocs-storagecluster-cephfs
        annotations:
          storageclass.kubernetes.io/is-default-class: 'true'
      provisioner: openshift-storage.cephfs.csi.ceph.com
      parameters:
        clusterID: openshift-storage
        csi.storage.k8s.io/controller-expand-secret-name: rook-csi-cephfs-provisioner
        csi.storage.k8s.io/controller-expand-secret-namespace: openshift-storage
        csi.storage.k8s.io/node-stage-secret-name: rook-csi-cephfs-node
        csi.storage.k8s.io/node-stage-secret-namespace: openshift-storage
        csi.storage.k8s.io/provisioner-secret-name: rook-csi-cephfs-provisioner
        csi.storage.k8s.io/provisioner-secret-namespace: openshift-storage
        fsName: ocs-storagecluster-cephfilesystem
      reclaimPolicy: Delete
      allowVolumeExpansion: true
      volumeBindingMode: Immediate
